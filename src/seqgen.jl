"""
MergeDataWith

Helper for Sequence Simulator, allows specifying template input file and destination output file
"""
@with_kw mutable struct MergeDataWith <: BEASTObject
    name::NString=nothing
    template::NString=nothing    # name of template file. The template file should be a valid beast2 XML file with a single (possibly empty) alignment. This alignment will be replaced by the alignment generated by the SequenceSimulator. Any occurrance of $(n) will be replaced by the iteration number of the SequenceSimulator. For example, calling a log filename "output$(n).log" will be replaced by "output1.log" at first iteration, "output2.log" at seccond iteration, etc..
    output::NString=nothing      # name of the output file. Instances of $(n) are replaced by iteration number.
end


"""
SequenceSimulator

Entry point for running a Beast task, for instance an MCMC or other probabilistic analysis, a simulation, etc.
Performs random sequence generation for a given site model. Sequences for the leave nodes in the tree are returned as an alignment.
"""
@with_kw mutable struct SequenceSimulator <: BEASTObject
    name::NString=nothing
    id::Union{Nothing, String}="seqgen"
    data::Union{Nothing, String, Alignment}=nothing         # alignment data which specifies datatype and taxa of the beast.tree
    tree::Union{Nothing, String, Tree}=nothing              # phylogenetic beast.tree with sequence data in the leafs
    siteModel::Union{Nothing, Vector{<:SiteModel}}=nothing         # site model for leafs in the beast.tree
    branchRateModel::Union{Nothing, Vector{<:BranchRateModel}}=nothing   # A model describing the rates on the branches of the beast.tree
    sequencelength::NInt64=nothing                # nr of samples to generate (default 1000).
    outputFileName::NString=nothing             # If provided, simulated alignment is written to this file rather than to standard out.
    merge::Union{Nothing, Vector{MergeDataWith}}=nothing               # specifies template used to merge the generated alignment with
    iterations::NInt64=nothing                        # number of times the data is generated. Default=1
end


function BEASTXML(nwk::Node, 
                  substModel::SubstitutionModel, 
                  siteModel::SiteModel, 
                  branchRateModel::BranchRateModel,
                  sequencelength::Int64,
                  outputFileName::String;
                  alignment_id::String="alignment",
                  tree_id::String="Tree")
    return BEASTXML(alignment=Alignment(nwk, alignment_id),
                    tree=TreeParser(nwk, tree_id),
                    run=SequenceSimulator(data="@"*alignment_id,
                                          tree="@"*tree_id,
                                          siteModel=siteModel,
                                          branchRateModel=branchRateModel,
                                          sequencelength=sequencelength,
                                          outputFileName=outputFileName))
end


function BEASTXML(nwk::Node,
                  clockRate::Float64,
                  sequencelength::Int64,
                  outputFileName::String;
                  alignment_id::String="alignment",
                  tree_id::String="Tree",
                  gammaCategoryCount=4)
    substModel = JukesCantor()
    branchRateModel = StrictClock(clockRate=clockRate)
    siteModel = SiteModel(gammaCategoryCount=gammaCategoryCount, substModel=substModel)
    return SequenceSimulatorXML(alignment=Alignment(nwk, alignment_id),
                                tree=TreeParser(nwk, tree_id),
                                run=SequenceSimulator(data="@"*alignment_id,
                                                      tree="@"*tree_id,
                                                      siteModel=siteModel,
                                                      branchRateModel=branchRateModel,
                                                      sequencelength=sequencelength,
                                                      outputFileName=outputFileName))
end